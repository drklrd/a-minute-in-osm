{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stats","initialized","_this2","fetch","then","response","json","setState","amenities","keys","filter","stat","includes","reduce","obj","value","split","amenitiesTemplate","map","amenity","index","react_default","a","createElement","dist","className","title","key","icon","lib_default","singleColor","users","href","planetFileLink","moment","createdDate","add","format","length","target","rel","changesets","createnode","modifynode","deletenode","createway","modifyway","deleteway","createrelation","modifyrelation","deleterelation","wayBuildings","getAmenities","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1bc033e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport MDSpinner from \"react-md-spinner\";\nimport moment from \"moment\";\nimport {Timeline, TimelineEvent} from 'react-event-timeline';\n\nimport 'flexboxgrid/dist/flexboxgrid.min.css'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      stats : {},\n      initialized : false\n    };\n  }\n\n  componentDidMount(){\n    fetch(\"http://localhost:8080/api/stats/hour\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({\n          stats : response.stats,\n          initialized : true\n        })\n      });\n  }\n\n  getAmenities(stats){\n    const amenities = Object.keys(stats).filter((stat)=>{\n      return stat.includes(\"amenity_\");\n    }).reduce((obj,value)=>{\n      obj[value.split(\"amenity_\")[1]] = stats[value];\n      return obj;\n    },{});\n    const amenitiesTemplate = (Object.keys(amenities).map((amenity,index)=>{\n      return(\n        <TimelineEvent className=\"timeline-content\" title={amenity} key={index} icon={<i className=\"material-icons md-18\">fiber_manual_record</i>}>\n              {amenities[amenity]} of them were created\n          </TimelineEvent>\n      )\n    }))\n    return {\n      amenities,\n      amenitiesTemplate\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"row\">\n      <div className=\"col-md-12\">\n\n        <h1>a minute<strong>*</strong> in OpenStreetMap</h1>\n        {\n          !this.state.initialized &&\n          <MDSpinner singleColor=\"#00b894\"/>\n        }\n        {\n          this.state.stats && this.state.stats.users &&\n          <div className=\"prose\">\n            <span className=\"remarks\"> OSM minutely planet diff used for this time duration can be found <a href={this.state.stats.planetFileLink}> here </a></span>\n            <br/>\n            <span className=\"timeStamp\"> <strong>*</strong>considering a minute between {moment(this.state.stats.createdDate).add('-1','minutes').format(\"HH:mm\")} to {moment(this.state.stats.createdDate).format(\"HH:mm\")} {moment(this.state.stats.createdDate).format(\"MMM DD, YYYY \")} </span>\n            <br/>\n            <span className=\"remarks\"> <strong>**</strong>way with tag building=yes</span>\n            <br/>\n            <span className=\"remarks\"> <strong>***</strong>way with tag amenity=... </span>\n            <div>\n              <Timeline className=\"timeline\">\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">timer</i>}>\n                          Within this one minute\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">people</i>}>\n                          {this.state.stats.users.length} people have contributed to <a href=\"http://osm.org\" target=\"_blank\" rel=\"noopener noreferrer\">OSM</a>\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">edit_location</i>}>\n                          {this.state.stats.changesets.length} changesets were made\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">place</i>}>\n                          {this.state.stats.createnode} nodes were created, {this.state.stats.modifynode} were modified, {this.state.stats.deletenode} were deleted\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">trending_up</i>}>\n                          {this.state.stats.createway} ways were created, {this.state.stats.modifyway} were modified, {this.state.stats.deleteway} were deleted\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">device_hub</i>}>\n                          {this.state.stats.createrelation} relations were created, {this.state.stats.modifyrelation} were modified, {this.state.stats.deleterelation} were deleted\n                      </TimelineEvent>\n                      <TimelineEvent className=\"timeline-content\" icon={<i className=\"material-icons md-18\">home</i>}>\n                          This includes creation of {this.state.stats.wayBuildings} buildings<strong>**</strong>\n                      </TimelineEvent>\n              </Timeline>\n            </div>\n            <br/>\n            {Object.keys(this.getAmenities(this.state.stats).amenities).length>0 &&\n              <div>\n                Also, this includes creation of following amenities<strong>***</strong>\n                <div className=\"amenities\">\n                  <br/>\n                  <Timeline className=\"timeline\">\n                    {this.getAmenities(this.state.stats).amenitiesTemplate}\n                  </Timeline>\n                </div>\n              </div>\n            }\n            <br/>\n          </div>\n        }\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}