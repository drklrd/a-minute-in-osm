{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stats","_this2","fetch","then","response","json","setState","react_default","a","createElement","className","users","length","changesets","deletenode","createnode","modifynode","deleteway","createway","modifyway","deleterelation","createrelation","modifyrelation","timeStamp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCiEzBC,2BA3Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAQ,IAHMR,mFAOC,IAAAS,EAAAN,KACjBO,MAAM,mBACHC,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACC,GACLH,EAAKK,SAAS,CACZN,MAAQI,EAASJ,2CAMvB,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,kEAEEd,KAAKI,MAAMC,OAASL,KAAKI,MAAMC,MAAMW,OACrCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZf,KAAKI,MAAMC,MAAMW,MAAMC,OAD1B,0BAEEL,EAAAC,EAAAC,cAAA,WAFF,YAGYd,KAAKI,MAAMC,MAAMa,WAAWD,OAHxC,qBAIEL,EAAAC,EAAAC,cAAA,WACCd,KAAKI,MAAMC,MAAMc,WALpB,uBAMEP,EAAAC,EAAAC,cAAA,WACCd,KAAKI,MAAMC,MAAMe,WAPpB,uBAQER,EAAAC,EAAAC,cAAA,WARF,OASOd,KAAKI,MAAMC,MAAMgB,WATxB,wBAUET,EAAAC,EAAAC,cAAA,WAVF,aAWad,KAAKI,MAAMC,MAAMiB,UAX9B,sBAYEV,EAAAC,EAAAC,cAAA,WACCd,KAAKI,MAAMC,MAAMkB,UAbpB,sBAcEX,EAAAC,EAAAC,cAAA,WAdF,OAeOd,KAAKI,MAAMC,MAAMmB,UAfxB,uBAgBEZ,EAAAC,EAAAC,cAAA,WAhBF,yBAiByBd,KAAKI,MAAMC,MAAMoB,eAjB1C,yBAkBEb,EAAAC,EAAAC,cAAA,WACCd,KAAKI,MAAMC,MAAMqB,eAnBpB,2BAoBEd,EAAAC,EAAAC,cAAA,WApBF,OAqBOd,KAAKI,MAAMC,MAAMsB,eArBxB,4BAsBEf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,UAAoCf,KAAKI,MAAMC,MAAMuB,UAArD,KACAhB,EAAAC,EAAAC,cAAA,oBAnDMe,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.c552f8ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      stats : {}\n    };\n  }\n\n  componentDidMount(){\n    fetch('/api/stats/hour')\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        this.setState({\n          stats : response.stats\n        })\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>What happened in the last one hour in OpenStreetMap?</h1>\n        {\n          this.state.stats && this.state.stats.users && \n          <div className=\"prose\">\n            {this.state.stats.users.length} people contributed in-\n            <br/>\n            creating {this.state.stats.changesets.length} changesets where;\n            <br/>\n            {this.state.stats.deletenode} nodes were deleted,\n            <br/>\n            {this.state.stats.createnode} nodes were created,\n            <br/>\n            and {this.state.stats.modifynode} nodes were modified.\n            <br/>\n            Similary, {this.state.stats.deleteway} ways were deleted,\n            <br/>\n            {this.state.stats.createway} ways were created,\n            <br/>\n            and {this.state.stats.modifyway} ways were modified.\n            <br/>\n            As for the relations, {this.state.stats.deleterelation} of them were deleted,\n            <br/>\n            {this.state.stats.createrelation} relations were created,\n            <br/>\n            and {this.state.stats.modifyrelation} relations were modified.\n            <br/>\n            <span className=\"timeStamp\"> As of {this.state.stats.timeStamp} </span>\n            <br/>\n          </div>\n\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}